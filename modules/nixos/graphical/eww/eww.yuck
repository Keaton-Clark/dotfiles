(defwindow bar
  :exclusive true
  :monitor 0
  :stacking "fg"
  :focusable false
  :geometry (geometry
              :y "1%"
              :width "98%"
              :anchor "top center"
              :height "2%")
  (bar_layout))

(defwidget bar_layout[]
  (centerbox
    :class "bar"
    (left)
    (center)
    (right)
  )
)
(defwidget left[]
    (box
      :space-evenly "false"
      :class "left"
      (time)
      (music)
    )
)
(defwidget right[]
  (box 
    :space-evenly "false"
    :halign "end"
    :class "right"
    (sys)
    (menu_button)
  )
)
(defwidget center[]
  (box
    :class "center"
    (desktop)
  )
)
(defwidget time[]
  (box
    :halign "start"
    :valign "fill"
    :vexpand "true"
    :class "time"
    (label :text {formattime(EWW_TIME, "%b %d 󰇙 %H:%M")})
  )
)
(defwidget menu_button[]
  (box
    :halign "end"
    :class "menu_button"
    (button
      :onclick `dunstify aa`
      "󰍜")
  )
)
(defwidget music[]
  (box 
    :orientation "h"
    :valign "fill"
    :halign "start"
    :class "music"
    :space-evenly "false"
    (button :onclick `playerctl previous` (label :text "󰒮"))
    (button :onclick `playerctl play-pause` (label :text { EWW_MUSIC?.["status"] == "Playing" ? "󰏤" : "󰐊" }))
    (button :onclick `playerctl next` (label :text "󰒭"))
    (label 
      :text "${EWW_MUSIC?.["title"]} - ${EWW_MUSIC?.["artist"]} - ${EWW_MUSIC?.["album"]}"
      :justify "center"
      :limit-width 40
    )
  )
)
(defwidget desktop[]
  (box 
    :class "workspace"
    :halign "center"
    (for desktop in EWW_WM_HYPR
      (button 
        :onclick `hyprctl dispatch workspace ${desktop?.["id"]}`
        :class "current-${desktop?.["current"]} ${desktop?.["windows"] > 0 ? "filled" : ""}"
        "${desktop?.["name"]}"
      )
    )
  )
)
(defwidget sys[]
  (box
    :valign "fill"
    :space-evenly "false"
    :halign "end"
    :class "sys"
    (label :text {WIFI_MAP[EWW_WIFI?.["state"]]})
    (label :text {BAT_MAP?.[round(EWW_BATTERY?.["total_avg"]/25, 0)]})
  )
)

(deflisten EWW_WM_HYPR
  `
  echo $(hyprctl workspaces -j | jq --argjson current "$(hyprctl activeworkspace -j)" 'map((select(.id==$current.id) | .current) |= "true") | sort_by(.id) | map((select(.name? | contains("special") | not)))')
  socat -u UNIX-CONNECT:/tmp/hypr/$HYPRLAND_INSTANCE_SIGNATURE/.socket2.sock - | while read -r line; do
        echo $(hyprctl workspaces -j | jq --argjson current "$(hyprctl activeworkspace -j)" 'map((select(.id==$current.id) | .current) |= "true") | sort_by(.id) | map((select(.name? | contains("special") | not)))')
  done
  `
)
(defpoll EWW_WIFI :interval "2s"
  `echo { \
    \\\"name\\\":\\\"$(nmcli -f GENERAL.DEVICE device show wlp0s20f3 | tr -s ' ' | cut -d' ' -f2)\\\", \
    \\\"state\\\":\\\"$(nmcli -f GENERAL.STATE device show wlp0s20f3 | tr -s ' ' | cut -d' ' -f2)\\\", \
    \\\"ip\\\":\\\"$(nmcli -f IP4.ADDRESS device show wlp0s20f3 | tr -s ' ' | cut -d' ' -f2)\\\", \
    \\\"ssid\\\":\\\"$(nmcli -f GENERAL.CONNECTION device show wlp0s20f3 | tr -s ' ' | cut -d' ' -f2)\\\" \
  }`
)

(deflisten EWW_WM_X
  `
  xprop -spy -root _NET_CURRENT_DESKTOP _NET_DESKTOP_NAMES | while read -r line; do
    if [[ $line == *"CURRENT"* ]]
    then
            current=$(echo "$line" | cut -d"=" -f2)
    else
            names=$(echo "$line" | cut -d"=" -f2 | sed 's#[",]##g')
    fi
    printf '['
    counter=0;
    for desktop in $names
    do 
            if [[ $counter -gt 0 ]]
            then
                    printf ","
            fi

            printf "{"

            if [[ $counter -eq $current ]]
            then
                    printf '\"current\":true,'
            else
                    printf '\"current\":false,'
            fi
            printf '\"id\": %d,' $counter
            printf '\"name\": \"%s\"}' $desktop
            ((counter++)) 
    done
    echo "]"
  done
  `
)
(defvar BAT_MAP
  `
    [
      "",
      "",
      "",
      "",
      ""
    ]
  `
)
(defvar WIFI_MAP
  `
    {
      "10":"󰖪",
      "30":"󰖪",
      "50":"󱛇",
      "80":"󱛇",
      "100":"󰖩",
      "110":"󱚵"
    }
  `
)
(deflisten EWW_MUSIC
  :initial "{}"
  `playerctl metadata -fF '{"album":"{{album}}","artist":"{{artist}}","title": "{{title}}","position": "{{position}}","status":"{{status}}","length":"{{mpris:length}}"}'`
)
